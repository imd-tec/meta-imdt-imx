From 2d3991438ae006fb5f464b69578c91e9543a9a64 Mon Sep 17 00:00:00 2001
From: Paul Thomson <pault@imd-tec.com>
Date: Thu, 5 May 2022 15:19:54 +0100
Subject: [PATCH] Add Int8 support for Quantize and Dequantize ops

---
 .../lite/delegates/nnapi/nnapi_delegate.cc       | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/tensorflow/lite/delegates/nnapi/nnapi_delegate.cc b/tensorflow/lite/delegates/nnapi/nnapi_delegate.cc
index e1de9e9d289..1773a6e1e6c 100644
--- a/tensorflow/lite/delegates/nnapi/nnapi_delegate.cc
+++ b/tensorflow/lite/delegates/nnapi/nnapi_delegate.cc
@@ -320,9 +320,15 @@ bool NeedInt8Conversion(const TfLiteContext* context, int builtin_code,
     case kTfLiteBuiltinTanh:
     case kTfLiteBuiltinTile:
     case kTfLiteBuiltinTopkV2:
-    case kTfLiteBuiltinTranspose: {
+    case kTfLiteBuiltinTranspose: 
+    case kTfLiteBuiltinDequantize: {
       return input_type == kTfLiteInt8;
     }
+    case kTfLiteBuiltinQuantize: {
+        const int output_id = node->outputs->data[0];
+        const TfLiteType output_type = context->tensors[output_id].type;
+        return output_type == kTfLiteInt8;
+    }
     default:
       return false;
   }
@@ -2293,6 +2299,7 @@ bool NNAPIDelegateKernel::Validate(
       } else {
         EXPECT_INPUT_TYPE_IN(input.type, kTfLiteUInt8, kTfLiteInt8);
 
+#ifdef __ANDROID__
         if (android_sdk_version == kMinSdkVersionForNNAPI12 &&
             input.type == kTfLiteInt8) {
           const auto zero_point = input.params.zero_point;
@@ -2302,6 +2309,7 @@ bool NNAPIDelegateKernel::Validate(
                  "symmetric quantization.",
                  &val_ctx);
         }
+#endif
       }
     } break;
     case kTfLiteBuiltinDensify: {
@@ -2866,9 +2874,9 @@ bool NNAPIDelegateKernel::Validate(
       }
       const auto output_type = context->tensors[node->outputs->data[0]].type;
       if (android_sdk_version < kMinSdkVersionForNNAPI13) {
-        Expect(output_type == kTfLiteUInt8,
-               NNAPIValidationFailureType::kUnsupportedOutputType,
-               "Output should be kTfLiteUInt8.", &val_ctx);
+        Expect(((output_type == kTfLiteUInt8) || (output_type == kTfLiteInt8)),
+             NNAPIValidationFailureType::kUnsupportedOutputType,
+             "Output should be kTfLiteUInt8 or kTfLiteInt8.", &val_ctx);
       } else {
         ExpectTypeIn(output_type, {kTfLiteUInt8, kTfLiteInt8},
                      NNAPIValidationFailureType::kUnsupportedOutputType,
